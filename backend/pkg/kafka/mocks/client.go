// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/redpanda-data/console/backend/pkg/kafka (interfaces: ClientRequestor)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kgo "github.com/twmb/franz-go/pkg/kgo"
	kmsg "github.com/twmb/franz-go/pkg/kmsg"
)

// MockClientRequestor is a mock of ClientRequestor interface.
type MockClientRequestor struct {
	ctrl     *gomock.Controller
	recorder *MockClientRequestorMockRecorder
}

// MockClientRequestorMockRecorder is the mock recorder for MockClientRequestor.
type MockClientRequestorMockRecorder struct {
	mock *MockClientRequestor
}

// NewMockClientRequestor creates a new mock instance.
func NewMockClientRequestor(ctrl *gomock.Controller) *MockClientRequestor {
	mock := &MockClientRequestor{ctrl: ctrl}
	mock.recorder = &MockClientRequestorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientRequestor) EXPECT() *MockClientRequestorMockRecorder {
	return m.recorder
}

// BeginTransaction mocks base method.
func (m *MockClientRequestor) BeginTransaction() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction")
	ret0, _ := ret[0].(error)
	return ret0
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockClientRequestorMockRecorder) BeginTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockClientRequestor)(nil).BeginTransaction))
}

// Close mocks base method.
func (m *MockClientRequestor) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClientRequestorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClientRequestor)(nil).Close))
}

// EndTransaction mocks base method.
func (m *MockClientRequestor) EndTransaction(arg0 context.Context, arg1 kgo.TransactionEndTry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EndTransaction indicates an expected call of EndTransaction.
func (mr *MockClientRequestorMockRecorder) EndTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndTransaction", reflect.TypeOf((*MockClientRequestor)(nil).EndTransaction), arg0, arg1)
}

// Flush mocks base method.
func (m *MockClientRequestor) Flush(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockClientRequestorMockRecorder) Flush(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockClientRequestor)(nil).Flush), arg0)
}

// PollFetches mocks base method.
func (m *MockClientRequestor) PollFetches(arg0 context.Context) kgo.Fetches {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PollFetches", arg0)
	ret0, _ := ret[0].(kgo.Fetches)
	return ret0
}

// PollFetches indicates an expected call of PollFetches.
func (mr *MockClientRequestorMockRecorder) PollFetches(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollFetches", reflect.TypeOf((*MockClientRequestor)(nil).PollFetches), arg0)
}

// Produce mocks base method.
func (m *MockClientRequestor) Produce(arg0 context.Context, arg1 *kgo.Record, arg2 func(*kgo.Record, error)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Produce", arg0, arg1, arg2)
}

// Produce indicates an expected call of Produce.
func (mr *MockClientRequestorMockRecorder) Produce(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockClientRequestor)(nil).Produce), arg0, arg1, arg2)
}

// Request mocks base method.
func (m *MockClientRequestor) Request(arg0 context.Context, arg1 kmsg.Request) (kmsg.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", arg0, arg1)
	ret0, _ := ret[0].(kmsg.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Request indicates an expected call of Request.
func (mr *MockClientRequestorMockRecorder) Request(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockClientRequestor)(nil).Request), arg0, arg1)
}

// RequestSharded mocks base method.
func (m *MockClientRequestor) RequestSharded(arg0 context.Context, arg1 kmsg.Request) []kgo.ResponseShard {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestSharded", arg0, arg1)
	ret0, _ := ret[0].([]kgo.ResponseShard)
	return ret0
}

// RequestSharded indicates an expected call of RequestSharded.
func (mr *MockClientRequestorMockRecorder) RequestSharded(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestSharded", reflect.TypeOf((*MockClientRequestor)(nil).RequestSharded), arg0, arg1)
}
